/*
 * generated by Xtext
 */
package com.opcoach.datasample.xtext.serializer;

import com.google.inject.Inject;
import com.opcoach.datasample.DataSample;
import com.opcoach.datasample.EntityGenerator;
import com.opcoach.datasample.FieldGenerator;
import com.opcoach.datasample.MDatasamplePackage;
import com.opcoach.datasample.xtext.services.DataSampleDSLGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;

@SuppressWarnings("all")
public abstract class AbstractDataSampleDSLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private DataSampleDSLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MDatasamplePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MDatasamplePackage.DATA_SAMPLE:
				sequence_DataSample(context, (DataSample) semanticObject); 
				return; 
			case MDatasamplePackage.ENTITY_GENERATOR:
				sequence_EntityGenerator(context, (EntityGenerator) semanticObject); 
				return; 
			case MDatasamplePackage.FIELD_GENERATOR:
				sequence_FieldGenerator(context, (FieldGenerator) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     DataSample returns DataSample
	 *
	 * Constraint:
	 *     (name=EString packageURI=EString seed=EInt language=Language entityGenerators+=EntityGenerator*)
	 */
	protected void sequence_DataSample(ISerializationContext context, DataSample semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EntityGenerator returns EntityGenerator
	 *
	 * Constraint:
	 *     (number=EInt entityName=EString fieldGenerators+=FieldGenerator*)
	 */
	protected void sequence_EntityGenerator(ISerializationContext context, EntityGenerator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FieldGenerator returns FieldGenerator
	 *
	 * Constraint:
	 *     (fieldName=EString generatorName=EString (errorRate=EInt errorGeneratorName=EString)?)
	 */
	protected void sequence_FieldGenerator(ISerializationContext context, FieldGenerator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
