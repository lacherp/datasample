/*
 * generated by Xtext
 */
package com.opcoach.datasample.xtext.serializer;

import com.google.inject.Inject;
import com.opcoach.datasample.AssociationGenerator;
import com.opcoach.datasample.ChildrenGenerator;
import com.opcoach.datasample.DataSample;
import com.opcoach.datasample.EntityGenerator;
import com.opcoach.datasample.FieldGenerator;
import com.opcoach.datasample.MDatasamplePackage;
import com.opcoach.datasample.xtext.services.DataSampleDSLGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public abstract class AbstractDataSampleDSLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private DataSampleDSLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MDatasamplePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MDatasamplePackage.ASSOCIATION_GENERATOR:
				sequence_AssociationGenerator(context, (AssociationGenerator) semanticObject); 
				return; 
			case MDatasamplePackage.CHILDREN_GENERATOR:
				sequence_ChildrenGenerator(context, (ChildrenGenerator) semanticObject); 
				return; 
			case MDatasamplePackage.DATA_SAMPLE:
				sequence_DataSample(context, (DataSample) semanticObject); 
				return; 
			case MDatasamplePackage.ENTITY_GENERATOR:
				sequence_EntityGenerator(context, (EntityGenerator) semanticObject); 
				return; 
			case MDatasamplePackage.FIELD_GENERATOR:
				sequence_FieldGenerator(context, (FieldGenerator) semanticObject); 
				return; 
			case MDatasamplePackage.PARAMETER:
				sequence_Parameter(context, (com.opcoach.datasample.Parameter) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     AssociationGenerator returns AssociationGenerator
	 *
	 * Constraint:
	 *     (
	 *         fieldName=EString 
	 *         generatorName=EString 
	 *         number=EInt? 
	 *         (parameters+=Parameter parameters+=Parameter*)? 
	 *         (errorRate=EInt errorGeneratorName=EString)?
	 *     )
	 */
	protected void sequence_AssociationGenerator(ISerializationContext context, AssociationGenerator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ChildrenGenerator returns ChildrenGenerator
	 *
	 * Constraint:
	 *     (
	 *         fieldName=EString 
	 *         generatorName=EString 
	 *         number=EInt? 
	 *         (parameters+=Parameter parameters+=Parameter*)? 
	 *         (errorRate=EInt errorGeneratorName=EString)?
	 *     )
	 */
	protected void sequence_ChildrenGenerator(ISerializationContext context, ChildrenGenerator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DataSample returns DataSample
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         packageURI=EString 
	 *         rootEntityName=EString 
	 *         seed=EInt 
	 *         language=Language 
	 *         entityGenerators+=EntityGenerator*
	 *     )
	 */
	protected void sequence_DataSample(ISerializationContext context, DataSample semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EntityGenerator returns EntityGenerator
	 *
	 * Constraint:
	 *     (number=EInt entityName=EString fieldGenerators+=FieldGenerator* childGenerators+=ChildrenGenerator* associationGenerators+=AssociationGenerator*)
	 */
	protected void sequence_EntityGenerator(ISerializationContext context, EntityGenerator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FieldGenerator returns FieldGenerator
	 *
	 * Constraint:
	 *     (
	 *         fieldName=EString 
	 *         generatorName=EString 
	 *         number=EInt? 
	 *         (parameters+=Parameter parameters+=Parameter*)? 
	 *         (errorRate=EInt errorGeneratorName=EString)?
	 *     )
	 */
	protected void sequence_FieldGenerator(ISerializationContext context, FieldGenerator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Parameter returns Parameter
	 *
	 * Constraint:
	 *     (name=ID value=EString)
	 */
	protected void sequence_Parameter(ISerializationContext context, com.opcoach.datasample.Parameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MDatasamplePackage.Literals.PARAMETER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MDatasamplePackage.Literals.PARAMETER__NAME));
			if (transientValues.isValueTransient(semanticObject, MDatasamplePackage.Literals.PARAMETER__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MDatasamplePackage.Literals.PARAMETER__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getParameterAccess().getValueEStringParserRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
}
