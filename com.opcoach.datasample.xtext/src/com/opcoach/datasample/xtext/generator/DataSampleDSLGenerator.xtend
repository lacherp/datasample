/*
 * generated by Xtext
 */
package com.opcoach.datasample.xtext.generator

import com.opcoach.datasample.DataSample
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl
import org.eclipse.emf.ecore.xmi.impl.XMIResourceFactoryImpl
import org.eclipse.emf.common.util.URI
import java.io.ByteArrayOutputStream

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
class DataSampleDSLGenerator implements IGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess fsa) {

		val ds = resource.contents.head as DataSample
		val generated = ds.generateValue

		println("Generated Object :" + ((generated === null) ? "null -> NO FILE GENERATED" : generated.toString))

		if (generated !== null) {
			val ext = ds.fileExtension
			val filename = ds.name + "." + ext
			val rset = new ResourceSetImpl
			rset.resourceFactoryRegistry.extensionToFactoryMap.put(ext, new XMIResourceFactoryImpl)
			val res = rset.createResource(URI.createFileURI(filename));
			val baos = new ByteArrayOutputStream
			res.contents.add(generated)
			res.save(baos, null)

			fsa.generateFile(filename, baos.toString)
		}
	}

}
