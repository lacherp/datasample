
«IMPORT dsgen»
«IMPORT ecore»

«EXTENSION template::ecoreType2GeneratorType»

«DEFINE main(String packageName, String rootProject) FOR dsgen::DSGenPackage»

«FILE this.ecorePackage.name.toString().toFirstUpper() + "SampleGenerator.java"»

package «packageName»;


// ------------------------------------------------
// OPCoach Generated File
// © OPCoach 2010     http://www.opcoach.com
// ------------------------------------------------ 


import com.opcoach.generator.*;
import com.opcoach.generator.basic.*;
import com.opcoach.generator.impl.*;
import «rootProject».«ecorePackage.name.toString()».*;
«EXPAND dataTypeImport FOREACH dsgenClassifiers.typeSelect(DSGenDataType)-»

/** Generator class to create an instance of «dsgenClassifiers.typeSelect(DSGenClass).last().ecoreClass.name»
 * @author OPCoach
 *
 */
public class «this.ecorePackage.name.toString().toFirstUpper()»SampleGenerator
{
  «EXPAND constanteDef FOREACH dsgenClassifiers.typeSelect(DSGenClass) -»
  	
	private GeneratorFactory gp = GeneratorFactory.eINSTANCE;
	private BasicFactory bf = BasicFactory.eINSTANCE;
	private «this.ecorePackage.name.toString().toFirstUpper()»Factory factory = «this.ecorePackage.name.toString().toFirstUpper()»Factory.eINSTANCE;
	
	// Eclass, EEnum and EDataType generators
	«EXPAND dataTypeGen FOREACH dsgenClassifiers»  
	
	// Fields generators
    «EXPAND attributeGen FOREACH dsgenClassifiers.typeSelect(DSGenClass).eAllContents.typeSelect(DSGenAttribute)-»		
    «EXPAND referenceGen FOREACH dsgenClassifiers.typeSelect(DSGenClass).eAllContents.typeSelect(DSGenReference)-»	
    
    // Constructor
    public «this.ecorePackage.name.toString().toFirstUpper()»SampleGenerator()
    {
      «FOREACH dsgenClassifiers.typeSelect(DSGenEnum) AS e -»
         init«e.ecoreEnum.name»Generator();
      «ENDFOREACH»
   
      «FOREACH dsgenClassifiers.typeSelect(DSGenDataType) AS d -»
         init«d.dataType.name»Generator();
      «ENDFOREACH»
   
    }
	       
	«EXPAND initEnumGenerator FOREACH dsgenClassifiers.typeSelect(DSGenEnum) -»
	
	«EXPAND initExternalDataTypeGenerator FOREACH dsgenClassifiers.typeSelect(DSGenDataType) -»
	
	
	«EXPAND createOneInstance FOREACH dsgenClassifiers.typeSelect(DSGenClass).withoutLast() -»
	
	«EXPAND createMainObject FOR dsgenClassifiers.typeSelect(DSGenClass).last() -»

	
	public static void main(String[] arg)
	{
	  «this.ecorePackage.name.toString().toFirstUpper() + "SampleGenerator"» gen = new «this.ecorePackage.name.toString().toFirstUpper() + "SampleGenerator"»();
	  «dsgenClassifiers.typeSelect(DSGenClass).last().ecoreClass.name» result = gen.create«dsgenClassifiers.typeSelect(DSGenClass).last().ecoreClass.name»();

	    System.out.println("«dsgenClassifiers.typeSelect(DSGenClass).last().ecoreClass.name» is created with :");
	  «FOREACH dsgenClassifiers.typeSelect(DSGenClass).last().children AS c»
	   «IF !c.single»
	   System.out.println("" + result.get«c.sourceReference.ecoreFeature.name.toString().toFirstUpper()»().size() + " «c.dsgenClass.ecoreClass.name»s");
	   for («c.dsgenClass.ecoreClass.name» o : result.get«c.sourceReference.ecoreFeature.name.toString().toFirstUpper()»())
	      System.out.println("«c.dsgenClass.ecoreClass.name» : " + o.toString());
	   «ENDIF»
	  «ENDFOREACH»
	}
	
	«EXPAND modelInformation FOR this»
}
   «ENDFILE»
   

«ENDDEFINE»


«DEFINE initEnumGenerator FOR DSGenEnum»
   private void init«this.ecoreEnum.name»Generator()
   {
    «FOREACH ecoreEnum.eLiterals AS l»
       «this.ecoreEnum.name.toLowerCase()»Generator.addValue(«this.ecoreEnum.name».«l.toString().toString().toUpperCase()»);
    «ENDFOREACH»
   }
«ENDDEFINE»

«DEFINE initExternalDataTypeGenerator FOR DSGenDataType»
   private void init«this.dataType.name»Generator()
   {
      //TODO : Initialize «dataType.name» generator here...
      // «this.dataType.name.toLowerCase()»Generator.addValue(new «dataType.name»());
   }
«ENDDEFINE»

«DEFINE dataTypeImport FOR DSGenEnum»
«ENDDEFINE»

«DEFINE dataTypeImport FOR DSGenDataType»
import «dataType.instanceClassName»;
«ENDDEFINE»


 «DEFINE constanteDef FOR DSGenClass-»
 «IF !this.rootObject-»
    public static int NB_«this.ecoreClass.name.toUpperCase()» = «instanceNumber»;
 «ENDIF»
 «ENDDEFINE»
 
 
  «DEFINE createMainObject FOR DSGenClassifier»
   // createMainObject for DSGenClassifier Not Implemented
 «ENDDEFINE»
 
 
 «DEFINE createMainObject FOR DSGenClass»
    // Main method to create the root object («ecoreClass.name»)
    public «this.ecoreClass.name» create«this.ecoreClass.name»()
    {
        «ecoreClass.name» result = factory.create«ecoreClass.name»();
        
        // Call children creation for all children...
        «EXPAND createChildren(this) FOREACH children»  

		// Set all fields
        «EXPAND setValue FOREACH dsgenFeatures»	
        
        return result;	
    }
 «ENDDEFINE»
 
 «DEFINE createChildren(DSGenClass parent) FOR DSGenChild -»
     // Create child for «sourceReference.ecoreFeature.name»
    «IF single -»
       «REM»The single composition may be internal to this object, or must be shared for future assocation ref to«ENDREM»
       «IF dsgenClass.nbAssociationRefTo > 0 -»
          // Create adress but store it in the reference generator for future association
          «sourceReference.ecoreFeature.eType.name» p_«sourceReference.ecoreFeature.eType.name.toLowerCase()» = create«sourceReference.ecoreFeature.eType.name»();
          «sourceReference.ecoreFeature.eType.name.toLowerCase()»Generator.addValue(p_«sourceReference.ecoreFeature.eType.name.toLowerCase()»);
          result.set«sourceReference.ecoreFeature.name.toString().toFirstUpper()»(p_«sourceReference.ecoreFeature.eType.name.toLowerCase()»);
       «ELSE-»
          // Create directly the child inside...
          result.set«sourceReference.ecoreFeature.name.toString().toFirstUpper()»(create«sourceReference.ecoreFeature.eType.name»());
       «ENDIF»
    «ELSE-»
       «REM»Multiple relation must create all objects here on each object...«ENDREM» 
       for (int i = 0; i <  NB_«dsgenClass.ecoreClass.name.toUpperCase()»; i++)
       {
			«dsgenClass.ecoreClass.name» o = create«dsgenClass.ecoreClass.name»();
			«IF dsgenClass.nbAssociationRefTo > 0 -»
			 «sourceReference.ecoreFeature.eType.name.toLowerCase()»Generator.addValue(o);
			 «ELSE-»
			 result.get«sourceReference.ecoreFeature.name.toString().toFirstUpper()»().add(o);
			 «ENDIF»
		}
		«IF dsgenClass.nbAssociationRefTo > 0 -»
		result.get«sourceReference.ecoreFeature.name.toString().toFirstUpper()»().addAll(«sourceReference.ecoreFeature.eType.name.toLowerCase()»Generator.getValues());
       «ENDIF»
    «ENDIF»
 «ENDDEFINE»
 
 

 «DEFINE dataTypeGen FOR DSGenClass-»
 	private ReferenceGenerator<«this.ecoreClass.name-»> «this.ecoreClass.name.toLowerCase()-»Generator = gp.createReferenceGenerator();
  «ENDDEFINE»
  
   «DEFINE dataTypeGen FOR DSGenEnum-»
 	private ReferenceGenerator<«this.ecoreEnum.name-»> «this.ecoreEnum.name.toLowerCase()-»Generator = gp.createReferenceGenerator();
  «ENDDEFINE»
  
   «DEFINE dataTypeGen FOR DSGenDataType-»
 	private ReferenceGenerator<«this.dataType.name-»> «this.dataType.name.toLowerCase()-»Generator = gp.createReferenceGenerator();
  «ENDDEFINE»
  
   «DEFINE dataTypeGen FOR DSGenClassifier-»
  «ENDDEFINE»
  

 «DEFINE attributeGen FOR dsgen::DSGenAttribute-»
    «IF ecoreFeature.eType.metaType.toString() == "ecore::EEnum"-»
     	private ReferenceGenerator<«ecoreFeature.eType.name»> «ecoreFeature.eContainingClass.name»_«ecoreFeature.name» = «ecoreFeature.eType.name.toLowerCase()»Generator;
    «ELSE-»
       «IF this.dsgenClass.dsgenPackage.dsgenClassifiers.typeSelect(DSGenDataType).exists(e| e.dataType.instanceClassName == ecoreFeature.eType.instanceClassName)-»
        	private «getGeneratorTypeForDSGenAttribute(this)» «ecoreFeature.eContainingClass.name»_«ecoreFeature.name» = «ecoreFeature.eType.name.toLowerCase()»Generator;
       «ELSE-»
          private «getGeneratorTypeForDSGenAttribute(this)» «ecoreFeature.eContainingClass.name»_«ecoreFeature.name» = bf.create«getGeneratorTypeForDSGenAttribute(this)»();
       «ENDIF»
    «ENDIF»
  «ENDDEFINE»
  

  

 «DEFINE referenceGen FOR DSGenReference-»
 	private ReferenceGenerator<«ecoreFeature.eType.name»> «ecoreFeature.eContainingClass.name»_«ecoreFeature.name» = «ecoreFeature.eType.name.toLowerCase()»Generator;
  «ENDDEFINE»


«DEFINE createOneInstance FOR DSGenClass»
public  «ecoreClass.name» create«ecoreClass.name»() {
    «ecoreClass.name» result = factory.create«ecoreClass.name»();
    // Call children creation for all children...
    «EXPAND createChildren(this) FOREACH children»  
    // Then init all features
    «EXPAND setValue FOREACH dsgenFeatures»		
    return result;
	}
«ENDDEFINE»

«DEFINE setValue FOR DSGenFeature-»
«ENDDEFINE»

«DEFINE setValue FOR DSGenAttribute»
   	result.set«ecoreFeature.name.toString().toFirstUpper()»(«ecoreFeature.eContainingClass.name»_«ecoreFeature.name».generateValue());
«ENDDEFINE»
  
 
 «DEFINE setValue FOR DSGenReference»   
       «REM»Composition already managed with children...«ENDREM» 
       «IF !isContainment(ecoreFeature)»
         // «ecoreFeature.name» is an association
         «IF isMultipleRelation(ecoreFeature) == "true"-»      
   	     result.get«ecoreFeature.name.toString().toFirstUpper()»().add(«ecoreFeature.eContainingClass.name»_«ecoreFeature.name».generateValue());
         «ELSE»
         result.set«ecoreFeature.name.toString().toFirstUpper()»(«ecoreFeature.eContainingClass.name»_«ecoreFeature.name».generateValue());
         «ENDIF»       
       «ENDIF»
 «ENDDEFINE»
 
 «DEFINE modelInformation FOR DSGenPackage-»
   //--------------------------------------------------------------------------
   // DSGen Model Information for Package «this.ecorePackage.name»
   //--------------------------------------------------------------------------
   «EXPAND modelInformation FOREACH this.dsgenClassifiers»
 «ENDDEFINE»
 
  «DEFINE modelInformation FOR DSGenClassifier-»
 «ENDDEFINE»
   
  «DEFINE modelInformation FOR DSGenClass-»
   // DSGenClass : «this.ecoreClass.name» «IF rootObject» is the main object «ENDIF» has «nbAssociationRefTo»  association reference to it
 «ENDDEFINE»
   
  «DEFINE modelInformation FOR DSGenDataType-»
   // External DataType : «this.dataType.name» is mapped to «this.dataType.instanceClassName» 
 «ENDDEFINE»
   
 «DEFINE modelInformation FOR DSGenEnum-»
   // Enum : «this.ecoreEnum.name»  
 «ENDDEFINE»
   
 

